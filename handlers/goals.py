from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.storage import goal_storage, ValidationError, StorageError
from keyboards.goals import GoalsKeyboard
from datetime import datetime, timedelta
from typing import List, Dict, Any
import json
import os
import re

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ª–µ–π
GOALS_FILE = "data/goals.json"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs("data", exist_ok=True)

def load_goals() -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ü–µ–ª–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(GOALS_FILE):
            with open(GOALS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"Error loading goals: {e}")
    return []

def save_goals(goals: List[Dict[str, Any]]) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–µ–ª–∏ –≤ —Ñ–∞–π–ª"""
    try:
        with open(GOALS_FILE, 'w', encoding='utf-8') as f:
            json.dump(goals, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"Error saving goals: {e}")

# –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏
STATUS_ICONS = {
    'completed': '‚úÖ',
    'pending': '‚¨úÔ∏è',
    'error': '‚ùå',
    'success': '‚úÖ'
}

PRIORITY_ICONS = {
    'high': 'üî¥',
    'medium': 'üü°',
    'low': 'üü¢'
}

TIME_ICONS = {
    'deadline': 'üìÖ',
    'calendar': 'üìÜ'
}

ACTION_ICONS = {
    'add': '‚ûï',
    'edit': '‚úèÔ∏è',
    'delete': 'üóë',
    'back': '‚óÄÔ∏è'
}

NAVIGATION_ICONS = {
    'sort': 'üîÑ'
}

router = Router()
goals_keyboard = GoalsKeyboard()

class AddGoal(StatesGroup):
    waiting_for_goal_text = State()
    waiting_for_priority = State()
    waiting_for_deadline = State()

def format_deadline(deadline: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not deadline:
        return ""
    try:
        date = datetime.strptime(deadline, "%Y-%m-%d").date()
        today = datetime.now().date()
        delta = date - today
        
        if delta.days == 0:
            return f"{TIME_ICONS['deadline']} –°–µ–≥–æ–¥–Ω—è"
        elif delta.days == 1:
            return f"{TIME_ICONS['deadline']} –ó–∞–≤—Ç—Ä–∞"
        elif delta.days < 0:
            return f"{STATUS_ICONS['error']} –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ ({date.strftime('%d.%m')})"
        elif delta.days < 7:
            return f"{TIME_ICONS['deadline']} –ß–µ—Ä–µ–∑ {delta.days} –¥–Ω."
        else:
            return f"{TIME_ICONS['calendar']} {date.strftime('%d.%m')}"
    except ValueError:
        return ""

def format_goal_text(goal: Dict[str, Any], index: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–π —Ü–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    status = STATUS_ICONS['completed'] if goal.get("completed", False) else STATUS_ICONS['pending']
    priority = goal.get("priority", "medium").lower()
    priority_emoji = PRIORITY_ICONS.get(priority, PRIORITY_ICONS['medium'])
    deadline_text = format_deadline(goal.get("deadline", ""))
    
    text = f"{status} {index}. {goal['text']}"
    if priority != "medium":  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—Ä–µ–¥–Ω–∏–π
        text += f" {priority_emoji}"
    if deadline_text:
        text += f" {deadline_text}"
    return text

def format_goal_button_text(goal: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ü–µ–ª–∏"""
    status = STATUS_ICONS['completed'] if goal.get("completed", False) else STATUS_ICONS['pending']
    priority = goal.get("priority", "medium").lower()
    priority_emoji = PRIORITY_ICONS.get(priority, PRIORITY_ICONS['medium'])
    deadline_text = format_deadline(goal.get("deadline", ""))
    
    text = f"{status} {goal['text']}"
    if priority != "medium":
        text += f" {priority_emoji}"
    if deadline_text:
        text += f" | {deadline_text}"
    return text

def generate_goals_keyboard(goals: List[Dict[str, Any]], show_sort: bool = False) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ü–µ–ª–µ–π"""
    buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    if show_sort and goals:
        buttons.extend([
            [
                InlineKeyboardButton(text=f"{PRIORITY_ICONS['high']} –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É", callback_data="sort_goals:priority"),
                InlineKeyboardButton(text=f"{STATUS_ICONS['completed']} –ü–æ —Å—Ç–∞—Ç—É—Å—É", callback_data="sort_goals:status")
            ],
            [
                InlineKeyboardButton(text=f"{TIME_ICONS['deadline']} –ü–æ –¥–µ–¥–ª–∞–π–Ω—É", callback_data="sort_goals:deadline"),
                InlineKeyboardButton(text=f"{TIME_ICONS['calendar']} –ü–æ –¥–∞—Ç–µ", callback_data="sort_goals:date")
            ],
            [InlineKeyboardButton(text=f"{ACTION_ICONS['back']} –°–∫—Ä—ã—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É", callback_data="sort_goals:hide")]
        ])
    elif goals:
        buttons.append([InlineKeyboardButton(text=f"{NAVIGATION_ICONS['sort']} –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", callback_data="sort_goals:show")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–∏
    for i, goal in enumerate(goals):
        goal_text = format_goal_button_text(goal)
        buttons.append([
            InlineKeyboardButton(text=goal_text, callback_data=f"toggle_goal:{i}"),
            InlineKeyboardButton(text=ACTION_ICONS['delete'], callback_data=f"delete_goal:{i}")
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏
    buttons.append([InlineKeyboardButton(text=f"{ACTION_ICONS['add']} –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", callback_data="add_goal")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.message(F.text == "üéØ –¶–µ–ª–∏")
async def show_goals(message: Message, state: FSMContext):
    try:
        goals = load_goals()
        
        if not goals:
            text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å!"
        else:
            text = "üéØ –í–∞—à–∏ —Ü–µ–ª–∏:\n\n"
            for i, goal in enumerate(goals, 1):
                text += format_goal_text(goal, i) + "\n"
        
        keyboard = generate_goals_keyboard(goals)
        await message.answer(text=text, reply_markup=keyboard)
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π: " + str(e))

@router.callback_query(F.data == "add_goal")
async def start_add_goal(callback: CallbackQuery, state: FSMContext):
    try:
        await state.set_state(AddGoal.waiting_for_goal_text)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π —Ü–µ–ª–∏:")
        await callback.answer()
    except Exception as e:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + str(e), show_alert=True)

@router.callback_query(F.data.startswith("toggle_goal:"))
async def toggle_goal_status(callback: CallbackQuery, state: FSMContext):
    try:
        goal_id = int(callback.data.split(":")[1])
        goals = load_goals()
        
        if 0 <= goal_id < len(goals):
            goals[goal_id]["completed"] = not goals[goal_id].get("completed", False)
            if goals[goal_id]["completed"]:
                goals[goal_id]["completed_at"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            else:
                goals[goal_id].pop("completed_at", None)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
            save_goals(goals)
            
            text = "üéØ –í–∞—à–∏ —Ü–µ–ª–∏:\n\n"
            for i, goal in enumerate(goals, 1):
                text += format_goal_text(goal, i) + "\n"
            
            keyboard = generate_goals_keyboard(goals)
            await callback.message.edit_text(text=text, reply_markup=keyboard)
            await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å —Ü–µ–ª–∏ –æ–±–Ω–æ–≤–ª—ë–Ω")
    except Exception as e:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + str(e), show_alert=True)

@router.callback_query(F.data.startswith("delete_goal:"))
async def delete_goal(callback: CallbackQuery, state: FSMContext):
    try:
        goal_id = int(callback.data.split(":")[1])
        goals = load_goals()
        
        if 0 <= goal_id < len(goals):
            deleted_goal = goals.pop(goal_id)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
            save_goals(goals)
            
            text = "üéØ –í–∞—à–∏ —Ü–µ–ª–∏:\n\n" if goals else "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å!"
            if goals:
                for i, goal in enumerate(goals, 1):
                    text += format_goal_text(goal, i) + "\n"
            
            keyboard = generate_goals_keyboard(goals)
            await callback.message.edit_text(text=text, reply_markup=keyboard)
            await callback.answer("üóë –¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞")
    except Exception as e:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + str(e), show_alert=True)

@router.message(AddGoal.waiting_for_goal_text)
async def receive_goal_text(message: Message, state: FSMContext):
    try:
        print("Receiving goal text...")
        
        if not isinstance(message.text, str):
            print(f"Invalid text type: {type(message.text)}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            return
            
        text = message.text.strip()
        if not text:
            await message.answer("‚ùå –¢–µ–∫—Å—Ç —Ü–µ–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
            
        print(f"Saving goal text: {text}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(goal_text=text)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{PRIORITY_ICONS['high']} –í—ã—Å–æ–∫–∏–π", callback_data="priority:high")],
            [InlineKeyboardButton(text=f"{PRIORITY_ICONS['medium']} –°—Ä–µ–¥–Ω–∏–π", callback_data="priority:medium")],
            [InlineKeyboardButton(text=f"{PRIORITY_ICONS['low']} –ù–∏–∑–∫–∏–π", callback_data="priority:low")]
        ])
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ü–µ–ª–∏:", reply_markup=keyboard)
        await state.set_state(AddGoal.waiting_for_priority)
        
    except Exception as e:
        print(f"Error in receive_goal_text: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Ü–µ–ª–∏: " + str(e))
        await state.clear()

@router.callback_query(AddGoal.waiting_for_priority)
async def receive_priority(callback: CallbackQuery, state: FSMContext):
    try:
        print("Receiving priority...")
        priority = callback.data.split(":")[1]
        print(f"Priority value: {priority}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        current_data = await state.get_data()
        await state.update_data(
            goal_text=current_data.get("goal_text"),
            priority=priority
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–¥–ª–∞–π–Ω–∞
        today = datetime.now().date()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=f"{TIME_ICONS['deadline']} –°–µ–≥–æ–¥–Ω—è", 
                                   callback_data=f"deadline:{today.strftime('%Y-%m-%d')}"),
                InlineKeyboardButton(text=f"{TIME_ICONS['deadline']} –ó–∞–≤—Ç—Ä–∞", 
                                   callback_data=f"deadline:{(today + timedelta(days=1)).strftime('%Y-%m-%d')}")
            ],
            [
                InlineKeyboardButton(text=f"{TIME_ICONS['deadline']} –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é", 
                                   callback_data=f"deadline:{(today + timedelta(weeks=1)).strftime('%Y-%m-%d')}")
            ],
            [
                InlineKeyboardButton(text=f"{TIME_ICONS['calendar']} –ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞", 
                                   callback_data="deadline:none")
            ]
        ])
        
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è —Ü–µ–ª–∏:", reply_markup=keyboard)
        await state.set_state(AddGoal.waiting_for_deadline)
        await callback.answer()
        
    except Exception as e:
        print(f"Error in receive_priority: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: " + str(e), show_alert=True)
        await state.clear()

@router.callback_query(AddGoal.waiting_for_deadline)
async def receive_deadline(callback: CallbackQuery, state: FSMContext):
    try:
        print(f"Receiving deadline: {callback.data}")
        deadline = None
        if callback.data.startswith("deadline:"):
            deadline = callback.data.split(":", 1)[1]
            if deadline == "none":
                deadline = None
                
        print(f"Deadline value: {deadline}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        print(f"State data: {data}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏
        goals = load_goals()
        goal_text = data.get("goal_text")
        priority = data.get("priority")
        
        if not isinstance(goal_text, str):
            raise ValueError("–¢–µ–∫—Å—Ç —Ü–µ–ª–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å
        new_goal = {
            "text": goal_text,
            "priority": priority,
            "deadline": deadline,
            "completed": False,
            "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        print(f"New goal: {new_goal}")
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
        goals.append(new_goal)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
        save_goals(goals)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = "üéØ –í–∞—à–∏ —Ü–µ–ª–∏:\n\n"
        for i, goal in enumerate(goals, 1):
            text += format_goal_text(goal, i) + "\n"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = generate_goals_keyboard(goals)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ü–µ–ª–µ–π
        await callback.message.answer(text=text, reply_markup=keyboard)
        await callback.message.delete()
        await callback.answer("‚úÖ –¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        await state.clear()
        
    except Exception as e:
        print(f"Error in receive_deadline: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + str(e), show_alert=True)
        await state.clear()

@router.callback_query(F.data.startswith("sort_goals:"))
async def handle_sort_goals(callback: CallbackQuery, state: FSMContext):
    try:
        action = callback.data.split(":")[1]
        data = await state.get_data()
        goals = data.get("goals", [])
        
        if not goals:
            await callback.answer("–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
            return
            
        if action == "show":
            keyboard = generate_goals_keyboard(goals, show_sort=True)
            await callback.message.edit_reply_markup(reply_markup=keyboard)
        elif action == "hide":
            keyboard = generate_goals_keyboard(goals, show_sort=False)
            await callback.message.edit_reply_markup(reply_markup=keyboard)
        else:
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
            if action == "priority":
                priority_order = {"high": 0, "medium": 1, "low": 2}
                goals.sort(key=lambda x: priority_order.get(x.get("priority", "medium"), 1))
            elif action == "status":
                goals.sort(key=lambda x: x.get("completed", False))
            elif action == "deadline":
                goals.sort(key=lambda x: x.get("deadline", "9999-12-31"))
            elif action == "date":
                goals.sort(key=lambda x: x.get("created_at", ""))
            elif action == "reverse":
                goals.reverse()
            
            await state.update_data(goals=goals)
            keyboard = generate_goals_keyboard(goals, show_sort=True)
            text = "üéØ –í–∞—à–∏ —Ü–µ–ª–∏:\n\n"
            
            for i, goal in enumerate(goals, 1):
                text += format_goal_text(goal, i) + "\n"
            
            await callback.message.edit_text(text=text, reply_markup=keyboard)
        
        await callback.answer()
    except Exception as e:
        await callback.answer(f"{STATUS_ICONS['error']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def send_goals_report(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–ª—è–º."""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ:
    # 1. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # 2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ —Ü–µ–ª–∏
    # 3. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–º –∏ —Ç–µ–∫—É—â–∏–º —Ü–µ–ª—è–º
    # 4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
    # await bot.send_message(
    #     chat_id=user_id,
    #     text="üéØ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–ª—è–º:\n\n"
    #          "‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ: X —Ü–µ–ª–µ–π\n"
    #          "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: Y —Ü–µ–ª–µ–π\n"
    #          "‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: Z —Ü–µ–ª–µ–π"
    # )
    pass
