from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.storage import GoalStorage
from keyboards.goals import GoalsKeyboard
from datetime import datetime, timedelta
from typing import List, Dict, Any
import json
import os
import re
from constants.icons import STATUS_ICONS, PRIORITY_ICONS, TIME_ICONS, ACTION_ICONS, NAVIGATION_ICONS
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ª–µ–π
GOALS_FILE = "data/goals.json"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs("data", exist_ok=True)

def load_goals() -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ü–µ–ª–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(GOALS_FILE):
            with open(GOALS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"Error loading goals: {e}")
    return []

def save_goals(goals: List[Dict[str, Any]]) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–µ–ª–∏ –≤ —Ñ–∞–π–ª"""
    try:
        with open(GOALS_FILE, 'w', encoding='utf-8') as f:
            json.dump(goals, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"Error saving goals: {e}")

router = Router()
goals_storage = GoalStorage()
goals_keyboard = GoalsKeyboard()

class GoalStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_priority = State()
    waiting_for_deadline = State()
    editing_text = State()
    editing_priority = State()
    editing_deadline = State()

def format_deadline(deadline: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not deadline:
        return ""
    try:
        date = datetime.strptime(deadline, "%Y-%m-%d").date()
        today = datetime.now().date()
        delta = date - today
        
        if delta.days == 0:
            return f"{TIME_ICONS['deadline']} –°–µ–≥–æ–¥–Ω—è"
        elif delta.days == 1:
            return f"{TIME_ICONS['deadline']} –ó–∞–≤—Ç—Ä–∞"
        elif delta.days < 0:
            return f"{STATUS_ICONS['error']} –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ ({date.strftime('%d.%m')})"
        elif delta.days < 7:
            return f"{TIME_ICONS['deadline']} –ß–µ—Ä–µ–∑ {delta.days} –¥–Ω."
        else:
            return f"{TIME_ICONS['calendar']} {date.strftime('%d.%m')}"
    except ValueError:
        return ""

def format_goal_text(goal: Dict[str, Any], index: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–π —Ü–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    status = STATUS_ICONS['completed'] if goal.get("completed", False) else STATUS_ICONS['pending']
    priority = goal.get("priority", "medium").lower()
    priority_emoji = PRIORITY_ICONS.get(priority, PRIORITY_ICONS['medium'])
    deadline_text = format_deadline(goal.get("deadline", ""))
    
    text = f"{status} {index}. {goal['text']}"
    if priority != "medium":  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—Ä–µ–¥–Ω–∏–π
        text += f" {priority_emoji}"
    if deadline_text:
        text += f" {deadline_text}"
    return text

def format_goal_button_text(goal: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ü–µ–ª–∏"""
    status = STATUS_ICONS['completed'] if goal.get("completed", False) else STATUS_ICONS['pending']
    priority = goal.get("priority", "medium").lower()
    priority_emoji = PRIORITY_ICONS.get(priority, PRIORITY_ICONS['medium'])
    deadline_text = format_deadline(goal.get("deadline", ""))
    
    text = f"{status} {goal['text']}"
    if priority != "medium":
        text += f" {priority_emoji}"
    if deadline_text:
        text += f" | {deadline_text}"
    return text

def generate_goals_keyboard(goals: List[Dict[str, Any]], show_sort: bool = False) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ü–µ–ª–µ–π"""
    buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    if show_sort and goals:
        buttons.extend([
            [
                InlineKeyboardButton(text=f"{PRIORITY_ICONS['high']} –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É", callback_data="sort_goals:priority"),
                InlineKeyboardButton(text=f"{STATUS_ICONS['completed']} –ü–æ —Å—Ç–∞—Ç—É—Å—É", callback_data="sort_goals:status")
            ],
            [
                InlineKeyboardButton(text=f"{TIME_ICONS['deadline']} –ü–æ –¥–µ–¥–ª–∞–π–Ω—É", callback_data="sort_goals:deadline"),
                InlineKeyboardButton(text=f"{TIME_ICONS['calendar']} –ü–æ –¥–∞—Ç–µ", callback_data="sort_goals:date")
            ],
            [InlineKeyboardButton(text=f"{ACTION_ICONS['back']} –°–∫—Ä—ã—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É", callback_data="sort_goals:hide")]
        ])
    elif goals:
        buttons.append([InlineKeyboardButton(text=f"{NAVIGATION_ICONS['sort']} –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", callback_data="sort_goals:show")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–∏
    for i, goal in enumerate(goals):
        goal_text = format_goal_button_text(goal)
        buttons.append([
            InlineKeyboardButton(text=goal_text, callback_data=f"toggle_goal:{i}"),
            InlineKeyboardButton(text=ACTION_ICONS['delete'], callback_data=f"delete_goal:{i}")
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏
    buttons.append([InlineKeyboardButton(text=f"{ACTION_ICONS['add']} –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", callback_data="add_goal")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.message(F.text == "üéØ –¶–µ–ª–∏")
async def show_goals_command(message: Message):
    """Handle the 'Goals' command."""
    try:
        goals = goals_storage.get_goals()
        keyboard = generate_goals_keyboard(goals)
        await message.answer(
            text="üéØ –í–∞—à–∏ —Ü–µ–ª–∏:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in show_goals_command: {str(e)}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π")

@router.callback_query(F.data == "show_goals")
async def show_goals(callback: CallbackQuery, state: FSMContext):
    """Show the list of goals."""
    try:
        goals = goals_storage.get_goals()
        keyboard, message_text = goals_keyboard.generate_goals_keyboard(goals)
        await callback.message.edit_text(text=message_text, reply_markup=keyboard)
        await callback.answer()
        await state.clear()
    except Exception as e:
        logger.error(f"Error in show_goals: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π", show_alert=True)

@router.callback_query(F.data == "goals_next_page")
async def next_page(callback: CallbackQuery, state: FSMContext):
    """Show the next page of goals."""
    goals = goals_storage.get_goals()
    keyboard, message_text = goals_keyboard.generate_goals_keyboard(goals, goals_keyboard.current_page + 1)
    await callback.message.edit_text(text=message_text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "goals_prev_page")
async def prev_page(callback: CallbackQuery, state: FSMContext):
    """Show the previous page of goals."""
    goals = goals_storage.get_goals()
    keyboard, message_text = goals_keyboard.generate_goals_keyboard(goals, goals_keyboard.current_page - 1)
    await callback.message.edit_text(text=message_text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("toggle_goal:"))
async def toggle_goal(callback: CallbackQuery, state: FSMContext):
    """Toggle the completion status of a goal."""
    try:
        goal_idx = int(callback.data.split(":")[1])
        goals = goals_storage.get_goals()
        
        if not 0 <= goal_idx < len(goals):
            await callback.answer("–û—à–∏–±–∫–∞: —Ü–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        goals[goal_idx]["completed"] = not goals[goal_idx].get("completed", False)
        goals_storage.save_data(goals)
        
        keyboard, message_text = goals_keyboard.generate_goals_keyboard(goals)
        await callback.message.edit_text(text=message_text, reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in toggle_goal: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ü–µ–ª–∏", show_alert=True)

@router.callback_query(F.data.startswith("delete_goal:"))
async def delete_goal(callback: CallbackQuery, state: FSMContext):
    """Delete a goal."""
    try:
        goal_idx = int(callback.data.split(":")[1])
        goals = goals_storage.get_goals()
        
        if not 0 <= goal_idx < len(goals):
            await callback.answer("–û—à–∏–±–∫–∞: —Ü–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        del goals[goal_idx]
        goals_storage.save_data(goals)
        
        keyboard, message_text = goals_keyboard.generate_goals_keyboard(goals)
        await callback.message.edit_text(text=message_text, reply_markup=keyboard)
        await callback.answer("–¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"Error in delete_goal: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏", show_alert=True)

@router.callback_query(F.data.startswith("edit_goal:"))
async def start_edit_goal(callback: CallbackQuery, state: FSMContext):
    """Start editing a goal."""
    try:
        goal_idx = int(callback.data.split(":")[1])
        goals = goals_storage.get_goals()
        
        if not 0 <= goal_idx < len(goals):
            await callback.answer("–û—à–∏–±–∫–∞: —Ü–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        await state.update_data(editing_goal_idx=goal_idx)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_goal_text:{goal_idx}"),
                InlineKeyboardButton(text="üéØ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data=f"edit_goal_priority:{goal_idx}")
            ],
            [
                InlineKeyboardButton(text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫", callback_data=f"edit_goal_deadline:{goal_idx}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="show_goals")
            ]
        ])
        
        await callback.message.edit_text(
            text=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–∏:\n{goals[goal_idx]['text']}",
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in start_edit_goal: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)

@router.callback_query(F.data.startswith("edit_goal_text:"))
async def start_edit_goal_text(callback: CallbackQuery, state: FSMContext):
    """Start editing goal text."""
    goal_idx = int(callback.data.split(":")[1])
    await state.set_state(GoalStates.editing_text)
    await state.update_data(editing_goal_idx=goal_idx)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏:")
    await callback.answer()

@router.message(GoalStates.editing_text)
async def receive_edited_text(message: Message, state: FSMContext):
    """Handle edited goal text."""
    data = await state.get_data()
    goal_idx = data["editing_goal_idx"]
    goals = goals_storage.get_goals()
    
    goals[goal_idx]["text"] = message.text
    goals_storage.save_data(goals)
    
    keyboard, message_text = goals_keyboard.generate_goals_keyboard(goals, goals_keyboard.current_page)
    await message.answer(text=message_text, reply_markup=keyboard)
    await state.clear()

@router.callback_query(F.data.startswith("edit_goal_priority:"))
async def start_edit_goal_priority(callback: CallbackQuery, state: FSMContext):
    """Start editing goal priority."""
    goal_idx = int(callback.data.split(":")[1])
    await state.set_state(GoalStates.editing_priority)
    await state.update_data(editing_goal_idx=goal_idx)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"{PRIORITY_ICONS['high']} –í—ã—Å–æ–∫–∏–π", callback_data=f"priority:high"),
            InlineKeyboardButton(text=f"{PRIORITY_ICONS['medium']} –°—Ä–µ–¥–Ω–∏–π", callback_data=f"priority:medium"),
            InlineKeyboardButton(text=f"{PRIORITY_ICONS['low']} –ù–∏–∑–∫–∏–π", callback_data=f"priority:low")
        ]
    ])
    
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(GoalStates.editing_priority)
async def receive_edited_priority(callback: CallbackQuery, state: FSMContext):
    """Handle edited goal priority."""
    data = await state.get_data()
    goal_idx = data["editing_goal_idx"]
    priority = callback.data.split(":")[1]
    
    goals = goals_storage.get_goals()
    goals[goal_idx]["priority"] = priority
    goals_storage.save_data(goals)
    
    keyboard, message_text = goals_keyboard.generate_goals_keyboard(goals, goals_keyboard.current_page)
    await callback.message.edit_text(text=message_text, reply_markup=keyboard)
    await state.clear()
    await callback.answer()

@router.callback_query(F.data.startswith("edit_goal_deadline:"))
async def start_edit_goal_deadline(callback: CallbackQuery, state: FSMContext):
    """Start editing goal deadline."""
    try:
        goal_idx = int(callback.data.split(":")[1])
        await state.set_state(GoalStates.editing_deadline)
        await state.update_data(editing_goal_idx=goal_idx)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=f"{TIME_ICONS['clock']} –°–µ–≥–æ–¥–Ω—è", callback_data=f"edit_deadline:{goal_idx}:{datetime.now().strftime('%Y-%m-%d')}"),
                InlineKeyboardButton(text=f"{TIME_ICONS['clock']} –ó–∞–≤—Ç—Ä–∞", callback_data=f"edit_deadline:{goal_idx}:{(datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')}")
            ],
            [
                InlineKeyboardButton(text=f"{TIME_ICONS['calendar']} –ù–µ–¥–µ–ª—è", callback_data=f"edit_deadline:{goal_idx}:{(datetime.now() + timedelta(days=7)).strftime('%Y-%m-%d')}"),
                InlineKeyboardButton(text=f"{TIME_ICONS['calendar']} –ú–µ—Å—è—Ü", callback_data=f"edit_deadline:{goal_idx}:{(datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d')}")
            ],
            [
                InlineKeyboardButton(text="–ë–µ–∑ —Å—Ä–æ–∫–∞", callback_data=f"edit_deadline:{goal_idx}:none")
            ]
        ])
        
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫:", reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        await state.clear()

@router.callback_query(F.data.startswith("edit_deadline:"))
async def receive_edited_deadline(callback: CallbackQuery, state: FSMContext):
    """Handle edited goal deadline."""
    try:
        parts = callback.data.split(":")
        if len(parts) < 3:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            await state.clear()
            return
            
        goal_idx = int(parts[1])
        deadline = parts[2]
        
        goals = goals_storage.get_goals()
        if not 0 <= goal_idx < len(goals):
            await callback.answer("–û—à–∏–±–∫–∞: —Ü–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            await state.clear()
            return
            
        goals[goal_idx]["deadline"] = None if deadline == "none" else deadline
        goals_storage.save_data(goals)
        
        keyboard, message_text = goals_keyboard.generate_goals_keyboard(goals)
        await callback.message.edit_text(text=message_text, reply_markup=keyboard)
        await state.clear()
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in receive_edited_deadline: {str(e)}")
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        await state.clear()

@router.callback_query(GoalStates.waiting_for_deadline)
async def receive_deadline(callback: CallbackQuery, state: FSMContext):
    """Handle deadline selection for a new goal."""
    try:
        parts = callback.data.split(":")
        if len(parts) < 2:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            await state.clear()
            return
            
        deadline_type = parts[1]
        state_data = await state.get_data()
        
        if not state_data.get("text"):
            await callback.answer("–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await state.clear()
            return
            
        if not state_data.get("priority"):
            await callback.answer("–û—à–∏–±–∫–∞: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω", show_alert=True)
            await state.clear()
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞
        deadline = None
        today = datetime.now().date()
        
        if deadline_type == "today":
            deadline = today.strftime("%Y-%m-%d")
        elif deadline_type == "tomorrow":
            deadline = (today + timedelta(days=1)).strftime("%Y-%m-%d")
        elif deadline_type == "week":
            deadline = (today + timedelta(days=7)).strftime("%Y-%m-%d")
        
        # Add the goal using storage method
        try:
            goals_storage.add_goal(
                text=state_data["text"],
                priority=state_data["priority"],
                deadline=deadline
            )
            
            # Get updated goals list and generate keyboard
            goals = goals_storage.get_goals()
            keyboard = generate_goals_keyboard(goals)
            
            # Update message with new goals list
            await callback.message.edit_text(
                text="üéØ –í–∞—à–∏ —Ü–µ–ª–∏:",
                reply_markup=keyboard
            )
            await callback.answer("‚úÖ –¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"Error in receive_deadline: {str(e)}")
            await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ª–∏: {str(e)}", show_alert=True)
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error in receive_deadline: {str(e)}")
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        await state.clear()

@router.callback_query(F.data == "goals_sort")
async def show_sort_options(callback: CallbackQuery):
    """Show goal sorting options."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É", callback_data="sort:priority"),
            InlineKeyboardButton(text="–ü–æ —Å—Ä–æ–∫—É", callback_data="sort:deadline")
        ],
        [
            InlineKeyboardButton(text="–ü–æ —Å—Ç–∞—Ç—É—Å—É", callback_data="sort:status"),
            InlineKeyboardButton(text="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="sort:default")
        ]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("goals_sort:"))
async def sort_goals(callback: CallbackQuery):
    """Sort goals based on selected criteria."""
    try:
        sort_type = callback.data.split(":")[1]
        goals = goals_storage.get_goals()
        
        if sort_type == "priority":
            priority_order = {"high": 0, "medium": 1, "low": 2}
            goals.sort(key=lambda x: priority_order.get(x.get("priority", "medium"), 1))
        elif sort_type == "deadline":
            goals.sort(key=lambda x: x.get("deadline") or "9999-12-31")
        elif sort_type == "status":
            goals.sort(key=lambda x: not x.get("completed", False))
        elif sort_type == "date":
            goals.sort(key=lambda x: x.get("created_at") or "")
        
        goals_storage.save_data(goals)
        keyboard, message_text = goals_keyboard.generate_goals_keyboard(goals)
        await callback.message.edit_text(text=message_text, reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in sort_goals: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ —Ü–µ–ª–µ–π", show_alert=True)

async def send_goals_report(bot: Bot):
    """Send weekly goals report."""
    goals = goals_storage.get_goals()
    completed = [g for g in goals if g.get("completed", False)]
    active = [g for g in goals if not g.get("completed", False)]
    overdue = [g for g in active if g.get("deadline") and datetime.strptime(g["deadline"], "%Y-%m-%d").date() < datetime.now().date()]
    
    text = "üéØ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ü–µ–ª—è–º:\n\n"
    text += f"‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ: {len(completed)} —Ü–µ–ª–µ–π\n"
    text += f"‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {len(active)} —Ü–µ–ª–µ–π\n"
    text += f"‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {len(overdue)} —Ü–µ–ª–µ–π\n\n"
    
    if overdue:
        text += "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏:\n"
        for goal in overdue:
            text += f"‚Ä¢ {goal['text']} ({goal.get('priority', '—Å—Ä–µ–¥–Ω–∏–π')})\n"
    
    await bot.send_message(USER_ID, text)

@router.callback_query(F.data == "add_goal")
async def start_add_goal(callback: CallbackQuery, state: FSMContext):
    """Start the goal addition process."""
    try:
        await state.set_state(GoalStates.waiting_for_text)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏:")
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in start_add_goal: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(GoalStates.waiting_for_text)
async def receive_goal_text(message: Message, state: FSMContext):
    """Handle receiving the goal text."""
    try:
        text = message.text.strip()
        await state.update_data(text=text)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üî¥ –í—ã—Å–æ–∫–∏–π", callback_data="priority_high"),
                InlineKeyboardButton(text="üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="priority_medium"),
                InlineKeyboardButton(text="üü¢ –ù–∏–∑–∫–∏–π", callback_data="priority_low")
            ]
        ])
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", reply_markup=keyboard)
        await state.set_state(GoalStates.waiting_for_priority)
    except Exception as e:
        logger.error(f"Error in receive_goal_text: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Ü–µ–ª–∏")
        await state.clear()

@router.callback_query(GoalStates.waiting_for_priority)
async def receive_priority(callback: CallbackQuery, state: FSMContext):
    """Handle receiving the goal priority."""
    try:
        priority = callback.data.split("_")[1]
        data = await state.get_data()
        text = data.get("text")
        
        if not text:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(priority=priority)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–¥–ª–∞–π–Ω–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="deadline:today"),
                InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data="deadline:tomorrow")
            ],
            [
                InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é", callback_data="deadline:week"),
                InlineKeyboardButton(text="–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞", callback_data="deadline:none")
            ]
        ])
        
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
        await state.set_state(GoalStates.waiting_for_deadline)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in receive_priority: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞", show_alert=True)
        await state.clear()
