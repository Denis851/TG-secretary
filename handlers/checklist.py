from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from states.add_task import AddTask
from services.storage import task_storage, ValidationError, StorageError
from keyboards.checklist import ChecklistKeyboard
from datetime import datetime, timedelta
from typing import List, Dict, Any
from services.config import Config
from services.checklist_storage import ChecklistStorage
from log import logger

router = Router()
checklist_keyboard = ChecklistKeyboard()

# –í–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
PRIORITY_ICONS = {
    "–≤—ã—Å–æ–∫–∏–π": "üî•",
    "—Å—Ä–µ–¥–Ω–∏–π": "‚öñÔ∏è",
    "–Ω–∏–∑–∫–∏–π": "üí§"
}

DEADLINE_PRESETS = {
    "today": "–°–µ–≥–æ–¥–Ω—è",
    "tomorrow": "–ó–∞–≤—Ç—Ä–∞",
    "week": "–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é",
    "no_deadline": "–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞"
}

def format_deadline(deadline: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not deadline:
        return ""
    try:
        date = datetime.strptime(deadline, "%Y-%m-%d").date()
        today = datetime.now().date()
        delta = date - today
        
        if delta.days == 0:
            return "‚è∞ –°–µ–≥–æ–¥–Ω—è"
        elif delta.days == 1:
            return "‚è∞ –ó–∞–≤—Ç—Ä–∞"
        elif delta.days < 0:
            return f"‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ ({date.strftime('%d.%m')})"
        elif delta.days < 7:
            return f"‚è∞ –ß–µ—Ä–µ–∑ {delta.days} –¥–Ω."
        else:
            return f"üìÖ {date.strftime('%d.%m')}"
    except ValueError:
        return ""

def generate_sort_buttons() -> List[List[InlineKeyboardButton]]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
    return [
        [
            InlineKeyboardButton(text="üî• –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É", callback_data="sort_tasks:priority"),
            InlineKeyboardButton(text="‚úÖ –ü–æ —Å—Ç–∞—Ç—É—Å—É", callback_data="sort_tasks:status")
        ],
        [
            InlineKeyboardButton(text="‚è∞ –ü–æ –¥–µ–¥–ª–∞–π–Ω—É", callback_data="sort_tasks:deadline"),
            InlineKeyboardButton(text="üìÖ –ü–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è", callback_data="sort_tasks:date")
        ],
        [
            InlineKeyboardButton(text="‚ÜïÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫", callback_data="sort_tasks:reverse")
        ]
    ]

def generate_checklist_inline_keyboard(data: List[Dict[str, Any]], show_sort: bool = False) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —á–µ–∫–ª–∏—Å—Ç–∞"""
    buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if show_sort and data:
        buttons.extend(generate_sort_buttons())
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –°–∫—Ä—ã—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É", callback_data="sort_tasks:hide")])
    elif data:
        buttons.append([InlineKeyboardButton(text="üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", callback_data="sort_tasks:show")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
    for i, item in enumerate(data):
        icon = PRIORITY_ICONS.get(item.get("priority", "—Å—Ä–µ–¥–Ω–∏–π").lower(), "‚öñÔ∏è")
        status = "‚úÖ" if item.get("completed", False) else "üî≤"
        deadline_text = format_deadline(item.get("deadline"))
        task_text = f"{status} {icon} {item['text']}"
        if deadline_text:
            task_text += f" {deadline_text}"
            
        buttons.append([
            InlineKeyboardButton(text=task_text, callback_data=f"toggle_task:{i}"),
            InlineKeyboardButton(text="üóëÔ∏è", callback_data=f"delete_task:{i}")
        ])
    
    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.message(F.text == "‚úÖ –ß–µ–∫–ª–∏—Å—Ç")
async def show_checklist(message: Message):
    try:
        tasks = task_storage.get_tasks()
        keyboard = checklist_keyboard.get_checklist_keyboard(tasks)
        await message.answer(**keyboard)
    except StorageError as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á: {str(e)}")

@router.callback_query(F.data == "add_task")
async def start_add_task(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:")
    await state.set_state(AddTask.waiting_for_task_text)
    await callback.answer()

@router.callback_query(F.data.startswith("toggle_task:"))
async def toggle_task_status(callback: CallbackQuery):
    try:
        task_text = callback.data.split(":")[1]
        tasks = task_storage.get_tasks()
        
        for task in tasks:
            if task["text"] == task_text:
                task["completed"] = not task.get("completed", False)
                if task["completed"]:
                    task["completed_at"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                else:
                    task.pop("completed_at", None)
                break
        
        task_storage.save_data(tasks)
        keyboard = checklist_keyboard.get_checklist_keyboard(tasks)
        await callback.message.edit_text(**keyboard)
        await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª—ë–Ω")
    except StorageError as e:
        await callback.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("delete_task:"))
async def delete_task(callback: CallbackQuery):
    try:
        task_text = callback.data.split(":")[1]
        tasks = task_storage.get_tasks()
        tasks = [task for task in tasks if task["text"] != task_text]
        task_storage.save_data(tasks)
        
        keyboard = checklist_keyboard.get_checklist_keyboard(tasks)
        await callback.message.edit_text(**keyboard)
        await callback.answer("üóëÔ∏è –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")
    except StorageError as e:
        await callback.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.message(AddTask.waiting_for_task_text)
async def receive_task_text(message: Message, state: FSMContext):
    try:
        text = message.text.strip()
        task_storage.validate_text(text)
        
        task_storage.add_task(
            text=text,
            priority="—Å—Ä–µ–¥–Ω–∏–π"  # Default priority
        )
        
        tasks = task_storage.get_tasks()
        keyboard = checklist_keyboard.get_checklist_keyboard(tasks)
        await message.answer(**keyboard)
        await state.clear()
    except ValidationError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except StorageError as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()

@router.callback_query(F.data.startswith("priority_"))
async def receive_priority(callback: CallbackQuery, state: FSMContext):
    try:
        priority = callback.data.split("_")[1]
        await state.update_data(priority=priority)
        await state.set_state(AddTask.waiting_for_deadline)
        
        # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
        today = datetime.now().date()
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
        buttons = [
            [{
                "text": "–°–µ–≥–æ–¥–Ω—è",
                "callback_data": f"deadline_{today.strftime('%Y-%m-%d')}"
            }, {
                "text": "–ó–∞–≤—Ç—Ä–∞",
                "callback_data": f"deadline_{(today + timedelta(days=1)).strftime('%Y-%m-%d')}"
            }],
            [{
                "text": "–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é",
                "callback_data": f"deadline_{(today + timedelta(weeks=1)).strftime('%Y-%m-%d')}"
            }],
            [{
                "text": "–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞",
                "callback_data": "deadline_none"
            }]
        ]
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –∑–∞–¥–∞—á–∏:",
            reply_markup=ChecklistKeyboard.create_inline_keyboard(buttons)
        )
        
    except ValidationError as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        await state.clear()
    except Exception as e:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", show_alert=True)
        await state.clear()

@router.callback_query(F.data.startswith("deadline_"))
async def receive_deadline(callback: CallbackQuery, state: FSMContext):
    try:
        deadline = callback.data.split("_")[1]
        data = await state.get_data()
        text = data.get("text")
        priority = data.get("priority")
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞", —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º None
        if deadline == "none":
            deadline = None
            
        task_storage.add_task(
            text=text,
            priority=priority,
            deadline=deadline
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        sort_data = await state.get_data()
        current_sort = sort_data.get("current_sort", "priority")
        reverse_sort = sort_data.get("reverse_sort", False)
        show_sort = sort_data.get("show_sort", False)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = task_storage.get_sorted_tasks(current_sort, reverse_sort)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        deadline_text = (
            f" (–¥–µ–¥–ª–∞–π–Ω: {ChecklistKeyboard.format_deadline(deadline)})" if deadline else ""
        )
        
        await callback.message.edit_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {text}{deadline_text}"
        )
        
        await callback.message.answer(
            "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:",
            reply_markup=ChecklistKeyboard.generate_checklist_keyboard(tasks, show_sort)
        )
        
    except ValidationError as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    except StorageError as e:
        await callback.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    finally:
        await state.clear()

@router.callback_query(F.data.startswith("sort_tasks:"))
async def handle_sort_tasks(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split(":")[1]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        sort_data = await state.get_data()
        current_sort = sort_data.get("current_sort", "priority")
        reverse_sort = sort_data.get("reverse_sort", False)
        show_sort = sort_data.get("show_sort", False)
        
        if action == "show":
            show_sort = True
        elif action == "hide":
            show_sort = False
        elif action == "reverse":
            reverse_sort = not reverse_sort
        else:
            current_sort = action
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        await state.update_data(
            current_sort=current_sort,
            reverse_sort=reverse_sort,
            show_sort=show_sort
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = task_storage.get_sorted_tasks(current_sort, reverse_sort)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.edit_reply_markup(
            reply_markup=ChecklistKeyboard.generate_checklist_keyboard(tasks, show_sort)
        )
        
        sort_names = {
            "priority": "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É",
            "status": "—Å—Ç–∞—Ç—É—Å—É",
            "deadline": "–¥–µ–¥–ª–∞–π–Ω—É",
            "date": "–¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è"
        }
        
        if action not in ["show", "hide"]:
            await callback.answer(
                f"–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ {sort_names.get(current_sort, current_sort)}"
                f"{' (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)' if reverse_sort else ''}"
            )
        else:
            await callback.answer()
            
    except StorageError as e:
        await callback.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def send_checklist_report(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á
        storage = ChecklistStorage()
        tasks = storage.get_tasks()
        
        if not tasks:
            return  # –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç—á–µ—Ç–∞
            
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        completed_tasks = len([task for task in tasks if task.get('completed', False)])
        total_tasks = len(tasks)
        completion_rate = (completed_tasks / total_tasks * 100) if total_tasks > 0 else 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        report_text = (
            "üìã –û—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞—á–∞–º –∑–∞ –¥–µ–Ω—å:\n\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_tasks} –∏–∑ {total_tasks} –∑–∞–¥–∞—á\n"
            f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {completion_rate:.1f}%\n\n"
            "üéØ –î–µ—Ç–∞–ª–∏ –ø–æ –∑–∞–¥–∞—á–∞–º:\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —Å—Ç–∞—Ç—É—Å—É
        completed_tasks_list = []
        pending_tasks_list = []
        
        for task in tasks:
            task_text = f"‚Ä¢ {task['text']}"
            if task.get('priority'):
                priority_icons = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}
                task_text += f" {priority_icons.get(task['priority'], '')}"
            if task.get('deadline'):
                task_text += f" (–¥–æ {task['deadline']})"
                
            if task.get('completed', False):
                completed_tasks_list.append(task_text)
            else:
                pending_tasks_list.append(task_text)
        
        if completed_tasks_list:
            report_text += "\n–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n" + "\n".join(completed_tasks_list)
        if pending_tasks_list:
            report_text += "\n\n–û–∂–∏–¥–∞—é—â–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n" + "\n".join(pending_tasks_list)
            
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        config = Config()
        user_id = config.get_user_id()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        await bot.send_message(
            chat_id=user_id,
            text=report_text
        )
        
    except Exception as e:
        logger.error(f"Error sending checklist report: {str(e)}")
