from aiogram import Bot, Router, F
from aiogram.types import Message
from services.storage import TaskStorage, GoalStorage
from config import settings
from datetime import datetime, timedelta
from collections import defaultdict

router = Router()
task_storage = TaskStorage()
goal_storage = GoalStorage()

@router.message(lambda msg: msg.text == "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def handle_progress(message: Message):
    await send_text_progress(message.bot)

# ---------- üìÖ –û—Ç—á—ë—Ç –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –∑–∞–¥–∞—á–∞–º –∏ —Ü–µ–ª—è–º ----------

async def send_checklist_report(bot: Bot):
    tasks = task_storage.get_tasks()
    incomplete = [t for t in tasks if not t.get("completed") and not t.get("done")]
    
    if not incomplete:
        await bot.send_message(
            chat_id=settings.USER_ID,
            text="‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!"
        )
        return

    text = "üìù –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
    text += "\n".join([f"üî≤ {t['text']}" for t in incomplete])

    await bot.send_message(settings.USER_ID, text)

async def send_goals_report(bot: Bot):
    goals = goal_storage.get_goals()
    active = [g for g in goals if not g.get("completed")]

    if active:
        text = "üéØ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏:\n\n"
        text += "\n".join([f"üìå {g['text']} ({g.get('priority', '—Å—Ä–µ–¥–Ω–∏–π')})" for g in active])
    else:
        text = "üéâ –í—Å–µ —Ü–µ–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã! –ü–æ—Ä–∞ —Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ üöÄ"

    await bot.send_message(settings.USER_ID, text)

# ---------- üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–æ–º–∞–Ω–¥–µ "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å" ----------

async def send_text_progress(bot: Bot):
    tasks = task_storage.get_tasks()
    goals = goal_storage.get_goals()

    total_tasks = len(tasks)
    done_tasks = sum(1 for t in tasks if t.get("completed"))

    total_goals = len(goals)
    done_goals = sum(1 for g in goals if g.get("completed"))

    task_percent = int((done_tasks / total_tasks) * 100) if total_tasks else 0
    goal_percent = int((done_goals / total_goals) * 100) if total_goals else 0

    text = "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
    text += f"‚úÖ –ó–∞–¥–∞—á–∏: {done_tasks} –∏–∑ {total_tasks} ({task_percent}%)\n"
    text += f"üéØ –¶–µ–ª–∏: {done_goals} –∏–∑ {total_goals} ({goal_percent}%)\n"

    if task_percent == 100 and goal_percent == 100:
        text += "\nüåü –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ 100%! –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ!"
    elif task_percent >= 70 or goal_percent >= 70:
        text += "\nüöÄ –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ü—Ä–æ–¥–æ–ª–∂–∞–π!"
    elif task_percent == 0 and goal_percent == 0:
        text += "\nüò¥ –ü–æ—Ä–∞ –≤–∫–ª—é—á–∏—Ç—å—Å—è! –¢—ã –≤—Å—ë —É—Å–ø–µ–µ—à—å!"
    else:
        text += "\nüìà –î–≤–∏–≥–∞–µ–º—Å—è –≤–ø–µ—Ä—ë–¥! –ö–∞–∂–¥—ã–π —à–∞–≥ –≤–∞–∂–µ–Ω."

    await bot.send_message(settings.USER_ID, text)

# ---------- üìä –í–æ—Å–∫—Ä–µ—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏ ----------

def get_last_7_dates():
    today = datetime.today().date()
    return [(today - timedelta(days=i)).strftime("%Y-%m-%d") for i in range(6, -1, -1)]

async def analyze_weekly_productivity(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ:
    # 1. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # 2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å:
    #    - –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    #    - –î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ —Ü–µ–ª–∏
    #    - –°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    # 3. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
    # await bot.send_message(
    #     chat_id=user_id,
    #     text="üìà –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"
    #          "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: X –∏–∑ Y\n"
    #          "üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ —Ü–µ–ª–µ–π: A –∏–∑ B\n"
    #          "üòä –°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: Z/5\n\n"
    #          "üåü –í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: 80%\n"
    #          "üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    # )
    pass

@router.message(F.text == "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def show_progress(message: Message):
    await message.answer(
        "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        "–ó–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
        "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: 0 –∏–∑ 0\n"
        "üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
        "–ó–∞ –Ω–µ–¥–µ–ª—é:\n"
        "üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ —Ü–µ–ª–µ–π: 0 –∏–∑ 0\n"
        "üìà –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 0%"
    )
