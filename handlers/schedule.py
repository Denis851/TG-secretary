from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from states.schedule_states import ScheduleEdit
from services.storage import schedule_storage, ValidationError
from datetime import datetime
import re
import random

router = Router()
quotes = [
    "–°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è –¥–æ—Ä–æ–≥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞. ‚Äî –õ–∞–æ-—Ü–∑—ã",
    "–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏–¥—Ç–∏ –æ—Ç –Ω–µ—É–¥–∞—á–∏ –∫ –Ω–µ—É–¥–∞—á–µ, –Ω–µ —Ç–µ—Ä—è—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞. ‚Äî –£–∏–Ω—Å—Ç–æ–Ω –ß–µ—Ä—á–∏–ª–ª—å",
    "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–µ–ª–∞—Ç—å –≤–µ–ª–∏–∫—É—é —Ä–∞–±–æ—Ç—É ‚Äî –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ. ‚Äî –°—Ç–∏–≤ –î–∂–æ–±—Å",
    "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ –±—ã—Ç—å —Ç–µ–º, –∫–µ–º —Ç—ã –º–æ–≥ –±—ã –±—ã—Ç—å. ‚Äî –î–∂–æ—Ä–¥–∂ –≠–ª–∏–æ—Ç",
    "–ë—É–¥—É—â–µ–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–º, –∫—Ç–æ –≤–µ—Ä–∏—Ç –≤ –∫—Ä–∞—Å–æ—Ç—É —Å–≤–æ–µ–π –º–µ—á—Ç—ã. ‚Äî –≠–ª–µ–æ–Ω–æ—Ä–∞ –†—É–∑–≤–µ–ª—å—Ç"
]

def validate_time_format(time_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (HH:MM)"""
    pattern = r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$'
    return bool(re.match(pattern, time_str))

def sort_schedule_by_time(schedule):
    """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
    return sorted(schedule, key=lambda x: datetime.strptime(x.get("time", "00:00"), "%H:%M"))

def generate_schedule_keyboard(schedule, show_controls=True):
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if show_controls:
        keyboard.append([
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç", callback_data="schedule_add"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="schedule_refresh")
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    sorted_schedule = schedule_storage.get_sorted_schedule()
    for i, entry in enumerate(sorted_schedule):
        time = entry.get("time", "00:00")
        task = entry.get("text", "")
        keyboard.extend([
            [InlineKeyboardButton(text=f"üïí {time} ‚Äî {task}", callback_data=f"view_schedule_{i}")],
            [
                InlineKeyboardButton(text="‚úèÔ∏è –¢–µ–∫—Å—Ç", callback_data=f"edit_text_{i}"),
                InlineKeyboardButton(text="‚è∞ –í—Ä–µ–º—è", callback_data=f"edit_time_{i}"),
                InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_schedule_{i}")
            ]
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

async def send_quote(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –º–æ—Ç–∏–≤–∏—Ä—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É."""
    quote = random.choice(quotes)
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    # –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∂–¥–æ–º—É. –°–µ–π—á–∞—Å —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
    # await bot.send_message(chat_id=user_id, text=f"üåü –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è:\n\n{quote}")
    pass

@router.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule(message: Message):
    try:
        schedule = schedule_storage.get_schedule()
        if not schedule:
            await message.answer(
                "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç", callback_data="schedule_add")
                ]])
            )
            return
        await message.answer("üóìÔ∏è –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=generate_schedule_keyboard(schedule))
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")

@router.callback_query(F.data == "schedule_add")
async def add_schedule_entry(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ScheduleEdit.waiting_for_new_entry)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –û–ø–∏—Å–∞–Ω–∏–µ\n–ù–∞–ø—Ä–∏–º–µ—Ä: 09:00 –£—Ç—Ä–µ–Ω–Ω—è—è –ø–ª–∞–Ω–µ—Ä–∫–∞")
    await callback.answer()

@router.message(ScheduleEdit.waiting_for_new_entry)
async def process_new_entry(message: Message, state: FSMContext):
    try:
        text = message.text.strip()
        match = re.match(r'^(\d{1,2}:\d{2})\s+(.+)$', text)
        
        if not match:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú –û–ø–∏—Å–∞–Ω–∏–µ\n–ù–∞–ø—Ä–∏–º–µ—Ä: 09:00 –£—Ç—Ä–µ–Ω–Ω—è—è –ø–ª–∞–Ω–µ—Ä–∫–∞")
            return
        
        time, description = match.groups()
        schedule_storage.add_entry(time, description)
        schedule = schedule_storage.get_schedule()
        
        await message.answer("‚úÖ –ü—É–Ω–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", reply_markup=generate_schedule_keyboard(schedule))
        await state.clear()
    except ValidationError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()

@router.callback_query(F.data.startswith("edit_text_"))
async def edit_schedule_text(callback: CallbackQuery, state: FSMContext):
    index = int(callback.data.split("_")[-1])
    await state.update_data(index=index)
    await state.set_state(ScheduleEdit.waiting_for_new_text)
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø—É–Ω–∫—Ç–∞:")
    await callback.answer()

@router.callback_query(F.data.startswith("edit_time_"))
async def edit_schedule_time(callback: CallbackQuery, state: FSMContext):
    index = int(callback.data.split("_")[-1])
    await state.update_data(index=index)
    await state.set_state(ScheduleEdit.waiting_for_new_time)
    await callback.message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):")
    await callback.answer()

@router.message(ScheduleEdit.waiting_for_new_text)
async def receive_schedule_text_update(message: Message, state: FSMContext):
    try:
        new_text = message.text.strip()
        data = await state.get_data()
        index = data["index"]
        
        schedule_storage.update_entry_text(index, new_text)
        schedule = schedule_storage.get_schedule()
        
        await message.answer("‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω", reply_markup=generate_schedule_keyboard(schedule))
        await state.clear()
    except ValidationError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()

@router.message(ScheduleEdit.waiting_for_new_time)
async def receive_schedule_time_update(message: Message, state: FSMContext):
    try:
        new_time = message.text.strip()
        data = await state.get_data()
        index = data["index"]
        
        schedule_storage.update_entry_time(index, new_time)
        schedule = schedule_storage.get_schedule()
        
        await message.answer("‚úÖ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=generate_schedule_keyboard(schedule))
        await state.clear()
    except ValidationError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()

@router.callback_query(F.data.startswith("delete_schedule_"))
async def delete_schedule_entry(callback: CallbackQuery):
    try:
        index = int(callback.data.split("_")[-1])
        deleted = schedule_storage.delete_entry(index)
        schedule = schedule_storage.get_schedule()
        
        await callback.message.edit_reply_markup(reply_markup=generate_schedule_keyboard(schedule))
        await callback.answer(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: {deleted['time']} ‚Äî {deleted['text']}")
    except ValidationError as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "schedule_refresh")
async def refresh_schedule(callback: CallbackQuery):
    try:
        schedule = schedule_storage.get_schedule()
        await callback.message.edit_reply_markup(reply_markup=generate_schedule_keyboard(schedule))
        await callback.answer("üîÑ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        await callback.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("view_schedule_"))
async def view_schedule_entry(callback: CallbackQuery):
    try:
        index = int(callback.data.split("_")[-1])
        schedule = schedule_storage.get_schedule()
        
        if 0 <= index < len(schedule):
            entry = schedule[index]
            await callback.answer(
                f"üïí {entry['time']}\nüìù {entry['text']}",
                show_alert=True
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)
