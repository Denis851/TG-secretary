"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–µ–∫–ª–∏—Å—Ç–æ–º
"""
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Dict, Any
from datetime import datetime
from .base import BaseKeyboard
from constants.icons import (
    PRIORITY_ICONS,
    STATUS_ICONS,
    TIME_ICONS,
    ACTION_ICONS,
    NAVIGATION_ICONS
)

class ChecklistKeyboard(BaseKeyboard):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —á–µ–∫–ª–∏—Å—Ç–∞"""
    
    @classmethod
    def get_checklist_keyboard(cls, tasks: list) -> dict:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —á–µ–∫–ª–∏—Å—Ç–∞
        :param tasks: —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        :return: —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        if not tasks:
            buttons = [[{
                "text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É",
                "callback_data": "add_task"
            }]]
            text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –≤ —á–µ–∫–ª–∏—Å—Ç–µ. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É!"
        else:
            buttons = []
            text = "üìã –í–∞—à —á–µ–∫–ª–∏—Å—Ç:\n\n"
            
            for i, task in enumerate(tasks, 1):
                status = "‚úÖ" if task.get("completed", task.get("done", False)) else "‚¨úÔ∏è"
                text += f"{status} {i}. {task['text']}\n"
                
                # –ö–Ω–æ–ø–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞—á–∏
                buttons.append([{
                    "text": f"{status} {task['text']}",
                    "callback_data": f"toggle_task:{task['text']}"
                }])
                
                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π
                buttons.append([{
                    "text": "üóë",
                    "callback_data": f"delete_task:{task['text']}"
                }])
            
            # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
            buttons.append([{
                "text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É",
                "callback_data": "add_task"
            }])
        
        return {
            "text": text,
            "reply_markup": cls.create_inline_keyboard(buttons)
        }

    @classmethod
    def get_main_keyboard(cls) -> dict:
        """
        –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞
        :return: —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        """
        buttons = [
            ["‚úÖ –ß–µ–∫–ª–∏—Å—Ç", "üéØ –¶–µ–ª–∏"],
            ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"]
        ]
        return {
            "reply_markup": cls.create_reply_keyboard(buttons)
        }

    @classmethod
    def generate_checklist_keyboard(
        cls,
        tasks: List[Dict[str, Any]],
        show_sort: bool = False
    ) -> InlineKeyboardMarkup:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —á–µ–∫–ª–∏—Å—Ç–∞"""
        buttons = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if show_sort:
            buttons.extend(cls.generate_sort_buttons())
            buttons.append([{
                "text": f"{ACTION_ICONS['back']} –°–∫—Ä—ã—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É",
                "callback_data": "sort_tasks:hide"
            }])
        elif tasks:
            buttons.append([{
                "text": f"{NAVIGATION_ICONS['sort']} –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞",
                "callback_data": "sort_tasks:show"
            }])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
        for i, task in enumerate(tasks):
            icon = PRIORITY_ICONS.get(task.get("priority", "—Å—Ä–µ–¥–Ω–∏–π").lower(), "‚öñÔ∏è")
            status = STATUS_ICONS["completed"] if task.get("completed", False) else STATUS_ICONS["pending"]
            deadline_text = cls.format_deadline(task.get("deadline"))
            
            task_text = f"{status} {icon} {task['text']}"
            if deadline_text:
                task_text += f" {deadline_text}"
                
            buttons.extend([
                [{
                    "text": task_text,
                    "callback_data": f"toggle_task:{i}"
                }],
                [{
                    "text": f"{ACTION_ICONS['edit']} –¢–µ–∫—Å—Ç",
                    "callback_data": f"edit_text_{i}"
                }, {
                    "text": f"{TIME_ICONS['deadline']} –î–µ–¥–ª–∞–π–Ω",
                    "callback_data": f"edit_deadline_{i}"
                }, {
                    "text": f"{ACTION_ICONS['delete']}",
                    "callback_data": f"delete_task:{i}"
                }]
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        buttons.append([{
            "text": f"{ACTION_ICONS['add']} –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É",
            "callback_data": "add_task"
        }])
        
        return cls.create_inline_keyboard(buttons)
    
    @classmethod
    def generate_sort_buttons(cls) -> List[List[Dict[str, str]]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        return [
            [{
                "text": f"{PRIORITY_ICONS['–≤—ã—Å–æ–∫–∏–π']} –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É",
                "callback_data": "sort_tasks:priority"
            }, {
                "text": f"{STATUS_ICONS['completed']} –ü–æ —Å—Ç–∞—Ç—É—Å—É",
                "callback_data": "sort_tasks:status"
            }],
            [{
                "text": f"{TIME_ICONS['deadline']} –ü–æ –¥–µ–¥–ª–∞–π–Ω—É",
                "callback_data": "sort_tasks:deadline"
            }, {
                "text": f"{TIME_ICONS['calendar']} –ü–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è",
                "callback_data": "sort_tasks:date"
            }],
            [{
                "text": f"{NAVIGATION_ICONS['sort']} –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫",
                "callback_data": "sort_tasks:reverse"
            }]
        ]
    
    @staticmethod
    def format_deadline(deadline: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not deadline:
            return ""
        try:
            date = datetime.strptime(deadline, "%Y-%m-%d").date()
            today = datetime.now().date()
            delta = date - today
            
            if delta.days == 0:
                return f"{TIME_ICONS['deadline']} –°–µ–≥–æ–¥–Ω—è"
            elif delta.days == 1:
                return f"{TIME_ICONS['deadline']} –ó–∞–≤—Ç—Ä–∞"
            elif delta.days < 0:
                return f"{STATUS_ICONS['overdue']} –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ ({date.strftime('%d.%m')})"
            elif delta.days < 7:
                return f"{TIME_ICONS['deadline']} –ß–µ—Ä–µ–∑ {delta.days} –¥–Ω."
            else:
                return f"{TIME_ICONS['calendar']} {date.strftime('%d.%m')}"
        except ValueError:
            return ""

    @staticmethod
    def create_inline_keyboard(buttons: List[List[Dict[str, str]]]) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
        :param buttons: —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        :return: –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup
        """
        keyboard = []
        for row in buttons:
            keyboard_row = []
            for button in row:
                keyboard_row.append(InlineKeyboardButton(
                    text=button["text"],
                    callback_data=button["callback_data"]
                ))
            keyboard.append(keyboard_row)
        return InlineKeyboardMarkup(inline_keyboard=keyboard) 