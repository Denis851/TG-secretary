"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–ª—è–º–∏
"""
from typing import List, Dict, Any, Union, Tuple
from .base import BaseKeyboard
from constants.icons import (
    PRIORITY_ICONS,
    STATUS_ICONS,
    TIME_ICONS,
    ACTION_ICONS,
    NAVIGATION_ICONS
)
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime

class GoalsKeyboard(BaseKeyboard):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Ü–µ–ª–µ–π"""
    
    @classmethod
    def generate_goals_keyboard(
        cls,
        goals: List[Dict[str, Any]],
        show_sort: bool = False
    ) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ü–µ–ª–µ–π
        
        Args:
            goals: —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
            show_sort: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            
        Returns:
            Dict —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–∑–º–µ—Ç–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        keyboard = []
        text = "üéØ –í–∞—à–∏ —Ü–µ–ª–∏:\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if show_sort and goals:
            keyboard.extend(cls.generate_sort_buttons())
        elif goals:
            keyboard.append([{
                "text": f"{NAVIGATION_ICONS['sort']} –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞",
                "callback_data": "sort_goals:show"
            }])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–∏
        for i, goal in enumerate(goals, 1):
            status = "‚úÖ" if goal.get("completed") else "‚¨úÔ∏è"
            priority = goal.get("priority", "normal").lower()
            priority_emoji = "üî¥" if priority == "high" else "üü°" if priority == "medium" else "üü¢"
            goal_text = goal.get("text", "")
            deadline = cls.format_deadline(goal.get("deadline", ""))
            
            if goals:
                text += f"{status} {i}. {goal_text} {priority_emoji} {deadline}\n"
            
            # –ö–Ω–æ–ø–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º —Ü–µ–ª–∏
            keyboard.append([{
                "text": f"{status} {priority_emoji} {goal_text}",
                "callback_data": f"goal_toggle:{i-1}"
            }])
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª—å—é
            keyboard.append([{
                "text": f"{ACTION_ICONS['edit']}",
                "callback_data": f"goal_edit:{i-1}"
            }, {
                "text": f"{ACTION_ICONS['delete']}",
                "callback_data": f"goal_delete:{i-1}"
            }])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        keyboard.append([{
            "text": f"{ACTION_ICONS['add']} –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å",
            "callback_data": "goal_add"
        }])
        
        return {
            "text": text,
            "reply_markup": cls.create_inline_keyboard(keyboard)
        }
    
    @classmethod
    def generate_sort_buttons(cls) -> List[List[Dict[str, str]]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        return [
            [{
                "text": f"{PRIORITY_ICONS['–≤—ã—Å–æ–∫–∏–π']} –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É",
                "callback_data": "sort_goals:priority"
            }, {
                "text": f"{STATUS_ICONS['completed']} –ü–æ —Å—Ç–∞—Ç—É—Å—É",
                "callback_data": "sort_goals:status"
            }],
            [{
                "text": f"{TIME_ICONS['deadline']} –ü–æ –¥–µ–¥–ª–∞–π–Ω—É",
                "callback_data": "sort_goals:deadline"
            }, {
                "text": f"{TIME_ICONS['calendar']} –ü–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è",
                "callback_data": "sort_goals:date"
            }],
            [{
                "text": f"{NAVIGATION_ICONS['sort']} –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫",
                "callback_data": "sort_goals:reverse"
            }]
        ]
    
    @staticmethod
    def format_deadline(deadline: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not deadline:
            return ""
        try:
            date = datetime.strptime(deadline, "%Y-%m-%d").date()
            today = datetime.now().date()
            delta = date - today
            
            if delta.days == 0:
                return f"{TIME_ICONS['deadline']} –°–µ–≥–æ–¥–Ω—è"
            elif delta.days == 1:
                return f"{TIME_ICONS['deadline']} –ó–∞–≤—Ç—Ä–∞"
            elif delta.days < 0:
                return f"{STATUS_ICONS['overdue']} –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ ({date.strftime('%d.%m')})"
            elif delta.days < 7:
                return f"{TIME_ICONS['deadline']} –ß–µ—Ä–µ–∑ {delta.days} –¥–Ω."
            else:
                return f"{TIME_ICONS['calendar']} {date.strftime('%d.%m')}"
        except ValueError:
            return ""

    @staticmethod
    def create_inline_keyboard(buttons: List[Union[Dict[str, str], List[Dict[str, str]]]]) -> InlineKeyboardMarkup:
        """
        Creates an inline keyboard from a list of buttons.
        
        Args:
            buttons: List of button configurations. Each item can be either:
                    - A dictionary representing a single button: {"text": str, "callback_data": str}
                    - A list of dictionaries representing a row of buttons
        
        Returns:
            InlineKeyboardMarkup: The constructed keyboard
        
        Example:
            buttons = [
                {"text": "Single Button", "callback_data": "single"},  # Single button in a row
                [  # Row of multiple buttons
                    {"text": "Button 1", "callback_data": "btn1"},
                    {"text": "Button 2", "callback_data": "btn2"}
                ]
            ]
        """
        keyboard = []
        for row in buttons:
            if isinstance(row, dict):
                # Single button as dict - create a new row with one button
                keyboard.append([InlineKeyboardButton(**row)])
            elif isinstance(row, list):
                # Row of buttons - convert each dict to InlineKeyboardButton
                keyboard.append([InlineKeyboardButton(**btn) for btn in row])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @classmethod
    def get_goals_keyboard(cls, goals: list) -> dict:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ü–µ–ª–µ–π
        :param goals: —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
        :return: —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        if not goals:
            buttons = [[{
                "text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å",
                "callback_data": "goal_add"
            }]]
            text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å!"
        else:
            buttons = []
            text = "üéØ –í–∞—à–∏ —Ü–µ–ª–∏:\n\n"
            
            for i, goal in enumerate(goals, 1):
                status = "‚úÖ" if goal.get("completed") else "‚¨úÔ∏è"
                priority = goal.get("priority", "—Å—Ä–µ–¥–Ω–∏–π").lower()
                priority_emoji = "üî¥" if priority == "–≤—ã—Å–æ–∫–∏–π" else "üü°" if priority == "—Å—Ä–µ–¥–Ω–∏–π" else "üü¢"
                
                text += f"{status} {i}. {goal['text']} {priority_emoji}\n"
                
                # –ö–Ω–æ–ø–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º —Ü–µ–ª–∏
                buttons.append([{
                    "text": f"{status} {goal['text']}",
                    "callback_data": f"goal_toggle:{i-1}"
                }])
                
                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª—å—é
                buttons.append([{
                    "text": "üóë",
                    "callback_data": f"goal_delete:{i-1}"
                }])
            
            # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–ª–∏
            buttons.append([{
                "text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å",
                "callback_data": "goal_add"
            }])
        
        return {
            "text": text,
            "reply_markup": cls.create_inline_keyboard(buttons)
        }

    @staticmethod
    def get_main_keyboard() -> dict:
        """
        –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é
        :return: —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="‚úÖ –ß–µ–∫–ª–∏—Å—Ç"),
                    KeyboardButton(text="üéØ –¶–µ–ª–∏")
                ],
                [
                    KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                    KeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
                ]
            ],
            resize_keyboard=True
        )
        
        return {
            "text": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            "reply_markup": keyboard
        } 